{"ast":null,"code":"var _jsxFileName = \"D:\\\\Post-Interval\\\\GC Opensoft\\\\project\\\\deloitte-chatbot\\\\src\\\\components\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  onLogout,\n  userRole\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const endOfMessagesRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Add welcome message when component mounts\n    const welcomeMessage = {\n      text: \"Hello! I'm your Deloitte well-being assistant. How are you feeling today?\",\n      sender: 'bot',\n      timestamp: new Date().toISOString()\n    };\n    setMessages([welcomeMessage]);\n  }, []);\n  useEffect(() => {\n    var _endOfMessagesRef$cur;\n    // Scroll to bottom whenever messages change\n    (_endOfMessagesRef$cur = endOfMessagesRef.current) === null || _endOfMessagesRef$cur === void 0 ? void 0 : _endOfMessagesRef$cur.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Add user message to chat\n    const userMessage = {\n      text: input,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsTyping(true);\n    try {\n      // Send message to backend\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n\n      // Simulate typing delay\n      setTimeout(() => {\n        const botMessage = {\n          text: data.response,\n          sender: 'bot',\n          timestamp: new Date().toISOString()\n        };\n        setMessages(prev => [...prev, botMessage]);\n        setIsTyping(false);\n      }, 1000);\n    } catch (error) {\n      console.error('Error:', error);\n\n      // Show error message\n      setTimeout(() => {\n        const errorMessage = {\n          text: \"I'm sorry, I'm having trouble connecting to the server. Please try again later.\",\n          sender: 'bot',\n          timestamp: new Date().toISOString()\n        };\n        setMessages(prev => [...prev, errorMessage]);\n        setIsTyping(false);\n      }, 1000);\n    }\n  };\n  const formatTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const handleNavigate = () => {\n    if (userRole === 'admin') {\n      navigate('/dashboard');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/deloitte-logo.png\",\n          alt: \"Deloitte Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Deloitte Well-being Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-actions\",\n        children: [userRole === 'admin' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dashboard-btn\",\n          onClick: handleNavigate,\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-btn\",\n          onClick: onLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timestamp\",\n            children: formatTime(message.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot-message\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content typing\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessagesRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-area\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message here...\",\n        disabled: isTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isTyping || !input.trim(),\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 2L11 13\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M22 2L15 22L11 13L2 9L22 2Z\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"o/VjLXs7uzNc+7SgMu7xLo+IfJw=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","ChatInterface","onLogout","userRole","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","endOfMessagesRef","navigate","welcomeMessage","text","sender","timestamp","Date","toISOString","_endOfMessagesRef$cur","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","userMessage","prev","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","data","json","setTimeout","botMessage","error","console","errorMessage","formatTime","date","toLocaleTimeString","hour","minute","handleNavigate","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","onSubmit","type","value","onChange","target","placeholder","disabled","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","_c","$RefreshReg$"],"sources":["D:/Post-Interval/GC Opensoft/project/deloitte-chatbot/src/components/ChatInterface.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './ChatInterface.css';\r\n\r\nconst ChatInterface = ({ onLogout, userRole }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const endOfMessagesRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Add welcome message when component mounts\r\n    const welcomeMessage = {\r\n      text: \"Hello! I'm your Deloitte well-being assistant. How are you feeling today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    setMessages([welcomeMessage]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom whenever messages change\r\n    endOfMessagesRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n\r\n    // Add user message to chat\r\n    const userMessage = {\r\n      text: input,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput('');\r\n    setIsTyping(true);\r\n\r\n    try {\r\n      // Send message to backend\r\n      const response = await fetch('http://localhost:5000/api/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Simulate typing delay\r\n      setTimeout(() => {\r\n        const botMessage = {\r\n          text: data.response,\r\n          sender: 'bot',\r\n          timestamp: new Date().toISOString()\r\n        };\r\n        setMessages(prev => [...prev, botMessage]);\r\n        setIsTyping(false);\r\n      }, 1000);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      \r\n      // Show error message\r\n      setTimeout(() => {\r\n        const errorMessage = {\r\n          text: \"I'm sorry, I'm having trouble connecting to the server. Please try again later.\",\r\n          sender: 'bot',\r\n          timestamp: new Date().toISOString()\r\n        };\r\n        setMessages(prev => [...prev, errorMessage]);\r\n        setIsTyping(false);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const formatTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  const handleNavigate = () => {\r\n    if (userRole === 'admin') {\r\n      navigate('/dashboard');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"logo\">\r\n          <img src=\"/deloitte-logo.png\" alt=\"Deloitte Logo\" />\r\n          <h1>Deloitte Well-being Assistant</h1>\r\n        </div>\r\n        <div className=\"header-actions\">\r\n          {userRole === 'admin' && (\r\n            <button className=\"dashboard-btn\" onClick={handleNavigate}>\r\n              Dashboard\r\n            </button>\r\n          )}\r\n          <button className=\"logout-btn\" onClick={onLogout}>\r\n            Logout\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"messages-container\">\r\n        {messages.map((message, index) => (\r\n          <div \r\n            key={index} \r\n            className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\r\n          >\r\n            <div className=\"message-content\">\r\n              <p>{message.text}</p>\r\n              <span className=\"timestamp\">{formatTime(message.timestamp)}</span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div className=\"message bot-message\">\r\n            <div className=\"message-content typing\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={endOfMessagesRef} />\r\n      </div>\r\n      \r\n      <form className=\"input-area\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message here...\"\r\n          disabled={isTyping}\r\n        />\r\n        <button type=\"submit\" disabled={isTyping || !input.trim()}>\r\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M22 2L11 13\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n            <path d=\"M22 2L15 22L11 13L2 9L22 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}